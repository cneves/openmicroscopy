<?xml version="1.0" encoding="utf-8"?>
<project name="lifecycle" default="help" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id: lifecycle.xml 5502 2009-10-17 22:04:24Z jmoore $
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  DOCUMENTATION:
  ==============================================================================
  Provides lifecycle targets similar to those found in maven. See
  http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

  Each target stair-steps down to prepare:
  dist->integration->install->package->compile->generate->prepare

-->

	<echo>Entering ${basedir}...</echo>

	<target name="help">
		<echo>
			This build file is intended for import only.
		</echo>
	</target>

	<target name="quick" description="Turn off tests">
		<echo>


                Deprecated: tests are disabled by default

                </echo>
		<property name="config.skip" value="true"/>
		<property name="test.skip" value="true"/>
		<property name="generate.skip" value="true"/>
	</target>

	<target name="nochecks" description="Turn off checks">
		<property name="checks.skip" value="true"/>
	</target>

	<target name="fail-on-error" description="Fail if tests do not pass">
		<property name="test.with.fail" value="true"/>
	</target>

	<target name="retrieve" unless="retrieve.done">
		<property name="retrieve.done" value="true"/>
		<installIvy/>
		<mkdir dir="${deps.lib.dir}"/>
		<ivy:retrieve settingsRef="ivy.${ant.project.name}" pattern="${deps.lib.dir}/[artifact].[ext]" log="quiet" sync="false" symlink="true"/>
	</target>

	<target name="prepare" depends="retrieve">
		<defineClasspath/>
                <defineVariables/>
		<makeDirectories/>
		<copyResource file="${root.dir}/lib/log4j-build.xml"/>
		<copyResource file="${root.dir}/etc/local.properties"/>
		<copyResource file="${root.dir}/etc/hibernate.properties"/>
		<copyResource file="${root.dir}/etc/log4j.xml"/>
		<copyResource file="${root.dir}/etc/omero.properties"/>
		<echo file="${classes.dir}/omero.properties" append="true">
omero.version=${omero.version}
		</echo>
		<!-- Used (at least) by server.xml and omero.xml -->
                <property name="omero.db.url" value="jdbc:postgresql://${omero.db.host}/${omero.db.name}"/>
		<presetdef name="sql_run">
			<sql
				driver="${omero.db.driver}"
				url="${omero.db.url}"
				userid="${omero.db.user}"
				password="${omero.db.pass}"
				print="false"
                                delimiter=";;"
				classpathref="omero.classpath">
			</sql>
		</presetdef>
	</target>

	<target name="generate" depends="prepare">
                <pathconvert property="omero.path" refid="omero.classpath"/>
                <echo file="${resrc.dest}/Classpath.sh">
                  export CLASSPATH=${omero.path}
                </echo>
		<copyResources/>
	</target>

	<!-- javac macro which can contain any number of path
	elements for compilation. Usually src.dir and src.dest
	will need to be compiled together because of inter-
	dependencies -->
	<macrodef name="myjavac">
	        <attribute name="destdir" default="${classes.dir}"/>
	        <attribute name="classpathref" default="omero.classpath"/>
	        <element name="srcelements" implicit="yes"/>
		<sequential>
		<javac
			fork="yes"
			destdir="@{destdir}"
			classpathref="@{classpathref}"
			sourcepath=""
			source="${javac.source}"
			target="${javac.target}"
			debug="${javac.debug}"
			debuglevel="${javac.debuglevel}"
                        deprecation="on"
			memoryMaximumSize="${javac.maxmem}"
		>
		        <srcelements/>
		</javac>
		</sequential>
	</macrodef>

	<target name="compile" depends="generate" unless="skip.compile">
		<myjavac>
		  <src path="${src.dir}"/>
		  <src path="${src.dest}"/>
		</myjavac>
	</target>

	<target name="testng-init" unless="testng.init.done">
		<property name="testng.init.done" value="true"/>
		<installIvy/>
		<defineClasspath/>
		<ivy:settings id="ivy.${ant.project.name}.test" file="${etc.dir}/ivysettings.xml"/>
		<ivy:resolve settingsRef="ivy.${ant.project.name}.test" file="${basedir}/test.xml" type="jar" log="quiet"/>
		<ivy:retrieve settingsRef="ivy.${ant.project.name}.test" pattern="${deps.lib.dir}/test/[artifact].[ext]" log="quiet" sync="false" symlink="true"/>
		<taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="omero.test.classpath"/>
		<taskdef resource="emma_ant.properties" classpathref="omero.classpath" />
	</target>

	<macrodef name="suite">
		<element name="files" implicit="yes"/>
		<sequential>
		<testng outputDir="${testreports.dir}"
			haltonfailure="${test.with.fail}"
			haltonskipped="${test.with.fail}"
			>
			<classpath>
				<pathelement location="${emmaclasses.dir}"/>
				<path refid="omero.test.classpath"/>
				<pathelement location="${testclasses.dir}"/>
				<pathelement location="${classes.dir}"/>
			</classpath>
			<files/>
			<jvmarg value="-Demma.coverage.out.file=${target.dir}/coverage.emma" />
			<jvmarg value="-Dlog4j.configuration=log4j-build.xml"/>
		</testng>
		</sequential>
	</macrodef>


	<target name="test-compile" depends="testng-init" unless="test.skip">
		<!-- may be overriden by fail-on-error -->
		<property name="test.with.fail" value="false"/>
		<property name="emma.enabled"   value="true"/>
	        <property name="unit.suite" value="unit.testng.xml"/>
		<copyTestResources/>
		<javac
			fork="yes"
			debug="on"
			destdir="${testclasses.dir}"
			classpathref="omero.test.classpath" >
			<src path="${test.dir}"/>
		</javac>
		<jar destfile="${target.dir}/${ivy.module}.jar">
			<fileset dir="${testclasses.dir}" includes="**/*.class,**/*.xml,**/*.properties,**/*.dv"/>
		</jar>
		<delete file="${target.dir}/${ivy.module}.xml"/> <!-- delete last produced ivy file to be sure a new one will be generated -->
		<ivy:publish artifactspattern="${target.dir}/[module].[ext]" resolver="test-resolver" settingsRef="ivy.${ant.project.name}"
		   pubrevision="${omero.version}" pubdate="${now}" status="integration" overwrite="true"/>
		<path id="emma.classpath">
			<pathelement location="${classes.dir}"/>
		</path>
		<emma enabled="${emma.enabled}" >
			<instr instrpathref="emma.classpath"
				destdir="${emmaclasses.dir}"
				metadatafile="${target.dir}/metadata.emma"
				merge="true"
			/>
		</emma>
	</target>

	<target name="test" depends="test-compile" unless="test.skip">
		<suite>
			<xmlfileset dir="${test.dir}">
				<include name="${unit.suite}"/>
			</xmlfileset>
		</suite>
		<emma enabled="${emma.enabled}" >
			<report sourcepath="${src.dir}" >
				<fileset dir="${target.dir}" includes="*.emma"/>
				<html outfile="${target.dir}/coverage.html" />
				<xml outfile="${target.dir}/coverage.xml" />
			</report>
		</emma>
	</target>

	<target name="integration" depends="test-compile" unless="test.skip">
		<!-- may be overriden by fail-on-error -->
		<property name="test.with.fail" value="false"/>
		<property name="integration.suite" value="integration.testng.xml"/>
		<suite>
			<xmlfileset dir="${test.dir}">
				<include name="${integration.suite}"/>
			</xmlfileset>
		</suite>
		<emma enabled="${emma.enabled}" >
			<report sourcepath="${src.dir}" >
				<fileset dir="${target.dir}" includes="*.emma"/>
				<html outfile="${target.dir}/coverage.html" />
				<xml outfile="${target.dir}/coverage.xml" />
			</report>
		</emma>
	</target>


	<target name="package" depends="compile">
		<pathconvert property="mf.classpath"
			refid="omero.compile.classpath"
			pathsep=" " dirsep="/">
			<flattenmapper/>
		</pathconvert>
                <property name="mf.classpath.and.jars" value="../../etc ${mf.classpath} services.jar extensions.jar"/>
		<jar destfile="${target.dir}/${ivy.module}.jar">
			<manifest>
				<attribute name="Class-Path" value="${mf.classpath.and.jars}"/>
				<attribute name="Main-Class" value="${main.class}"/>
			</manifest>
			<fileset dir="${classes.dir}">
				<exclude name="local.properties"/>
				<exclude name="log4j.xml"/>
			</fileset>
		</jar>
	</target>

	<target name="load-findbugs" depends="prepare">
		<property name="findbugs.path"   value="omero.classpath"/>
		<property name="findbugs.type"   value="jar"/>
		<property name="findbugs.target" value="${target.dir}/${ivy.module}.${findbugs.type}"/>
		<property name="findbugs.home"   value="${omero.home}/lib/findbugs-${versions.findbugs}"/>
		<taskdef name="find-bugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="omero.classpath"/>
		<taskdef resource="checkstyletask.properties" classpathref="omero.classpath"/>
		<condition property="no.findbugs"><not><available file="${findbugs.target}"/></not></condition>
		<macrodef name="do-find-bugs">
			<sequential>
			<find-bugs home="${findbugs.home}" output="xml:withMessages" outputFile="${target.dir}/findbugs.xml"
                                   excludeFilter="${import.dir}/excludebugs.xml">
				<class location="${findbugs.target}" />
				<auxClasspath>
					<path refid="${findbugs.path}"/>
				</auxClasspath>
				<sourcePath>
					<path>
						<pathelement location="${src.dir}"/>
						<pathelement location="${src.dest}"/>
					</path>
				</sourcePath>
			</find-bugs>
			</sequential>
		</macrodef>
		<macrodef name="do-checkstyle">
			<sequential>
			<checkstyle config="${omero.home}/docs/styles/checkstyle.xml" failOnViolation="false">
				<fileset dir="${basedir}" includes="**/*.java"/>
				<formatter type="xml" toFile="${target.dir}/checkstyle.xml"/>
			</checkstyle>
			</sequential>
		</macrodef>
	</target>

	<target name="findbugs" description="Run findbugs on components' jar" depends="load-findbugs" unless="no.findbugs">
		<do-find-bugs/>
		<do-checkstyle/>
	</target>

	<target name="install" depends="package">
		<publishArtifact/>
	</target>

	<!-- Previously dependend on integration, but that may need special controls.
	For the time being, depenending solely on "install" -->
	<target name="dist" depends="install">
		<!-- empty by default -->
	</target>

	<target name="clean">
		<delete dir="${target.dir}"/>
	</target>

	<!-- NON-LIFECYCLE HELPER TARGETS -->

	<target name="strict-test" depends="fail-on-error,clean-tests,test"/>

	<target name="clean-tests">
		<delete dir="${testclasses.dir}"/>
		<delete dir="${testreports.dir}"/>
	</target>

	<target name="refresh" if="eclipse.running">
		<eclipse.refreshLocal resource="omero-dsl" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-common" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-server" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-client" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-shoola-adapter" depth="infinite"/>
		<eclipse.refreshLocal resource="missing" depth="infinite"/>
	</target>

	<macrodef name="copyResource">
		<attribute name="file"/>
		<sequential>
		<basename property="props.file.prop" file="@{file}"/>
		<copy file="@{file}" todir="${resrc.dest}" failonerror="true" />
		<copy file="@{file}" todir="${classes.dir}" failonerror="true" />
		</sequential>
	</macrodef>

</project>

